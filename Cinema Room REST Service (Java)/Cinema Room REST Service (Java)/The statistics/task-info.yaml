type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonView;


    @JsonView({View.purchased.class, View.returned.class})
    public class Seat {
        private int row;
        private int column;
        private int price;
        private boolean isAvailable;

        public Seat(int row, int column, int price, boolean isAvailable) {
            this.row = row;
            this.column = column;
            this.price = price;
            this.isAvailable = isAvailable;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        @JsonIgnore
        // ignores the field isAvailable, as required by the task
        public boolean isAvailable() {
            return isAvailable;
        }

        public void setAvailability(boolean isAvailable) {
            this.isAvailable = isAvailable;
        }
    }
  learner_created: true
- name: src/cinema/ErrorMessage.java
  visible: true
  text: |
    package cinema;

    public class ErrorMessage {
        public static final String UNAVAILABLE = "{\"error\": \"The ticket has been already purchased!\"}";
        public static final String NON_EXISTING_SEAT = "{\"error\": \"The number of a row or a column is out of bounds!\"}";
        public static final String WRONG_TOKEN = "{\"error\": \"Wrong token!\"}";
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonView;

    public class Ticket {
        private String token;
        private Seat seat;

        public Ticket(String token, Seat seat) {
            this.token = token;
            this.seat = seat;
        }

        @JsonView(View.purchased.class) // should only be returned when POST-request equals "/purchase"
        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        @JsonView(View.purchased.class) // should only be returned when POST-request equals "/purchase"
        @JsonProperty("ticket")
        public Seat getSeat() {
            return seat;
        }

        @JsonView(View.returned.class) // should only be returned when POST-request equals "/return"
        @JsonProperty("returned_ticket")
        public Seat getReturnedSeat() {
            return seat;
        }

        public void setSeat(Seat seat) {
            this.seat = seat;
        }
    }
  learner_created: true
- name: src/cinema/CinemaConfig.java
  visible: true
  text: |
    package cinema;

    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    import java.util.HashMap;
    import java.util.Map;


    @Configuration
    public class CinemaConfig {
        @Bean
        public CinemaRoom cinemaRoom() {
            Seat[][] availableSeats = new Seat[9][9];

            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    int price = row <= 3 ? 10 : 8;
                    availableSeats[row][col] = new Seat(row + 1, col + 1, price, true);
                }
            }

            return new CinemaRoom(9, 9, availableSeats);
        }

        @Bean
        public Map<String, Ticket> purchasedTickets() {
            return new HashMap<>();
        }
    }
  learner_created: true
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |-
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonView;

    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;

    public class CinemaRoom {
        private int totalRows;
        private int totalColumns;
        private Seat[][] availableSeats;

        public CinemaRoom(int totalRows, int totalColumns, Seat[][] availableSeats) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableSeats = availableSeats;
        }

        @JsonProperty("total_rows")
        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        @JsonProperty("total_columns")
        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        @JsonProperty("available_seats")
        public List<Seat> getAvailableSeats() {
            // returns the 2D-array CinemaRoom as a list, as required by the task
            return Arrays.stream(availableSeats)
                    .flatMap(Arrays::stream)
                    .filter(Seat::isAvailable)
                    .collect(Collectors.toList());
        }

        public void setAvailableSeats(Seat[][] availableSeats) {
            this.availableSeats = availableSeats;
        }

        public Seat getSeat(int row, int col) {
            if (row < 1 || row > totalRows || col < 1 || col > totalColumns) {
                return null;
            }
            return availableSeats[row - 1][col - 1];
        }
    }
  learner_created: true
- name: src/cinema/View.java
  visible: true
  text: |
    package cinema;

    // class used to initialize which components to return in a POST-request
    public class View {
        interface purchased {
        }

        interface returned {
        }
    }
  learner_created: true
- name: src/cinema/SeatsController.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonView;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.Map;
    import java.util.UUID;

    @RestController
    public class SeatsController {

        private final CinemaRoom cinemaRoom;
        private final Map<String, Ticket> purchasedTickets;

        @Autowired
        public SeatsController(CinemaRoom cinemaRoom, Map<String, Ticket> purchasedTickets) {
            this.cinemaRoom = cinemaRoom;
            this.purchasedTickets = purchasedTickets;
        }

        @GetMapping("/seats")
        public CinemaRoom getSeats() {
            return this.cinemaRoom;
        }

        @JsonView(View.purchased.class)
        @PostMapping("/purchase")
        public ResponseEntity<Object> purchaseSeat(@RequestBody Map<String, Integer> payload) {
            int row = payload.get("row");
            int column = payload.get("column");
            Seat seat = cinemaRoom.getSeat(row, column);

            if (seat == null) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ErrorMessage.NON_EXISTING_SEAT);
            }
            if (!seat.isAvailable()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ErrorMessage.UNAVAILABLE);
            }

            seat.setAvailability(false);

            String token = UUID.randomUUID().toString();
            Ticket ticket = new Ticket(token, seat);

            purchasedTickets.put(token, ticket);

            return ResponseEntity.status(HttpStatus.OK).body(ticket);
        }


        @JsonView(View.returned.class)
        @PostMapping("/return")
        public ResponseEntity<Object> returnTicket(@RequestBody Map<String, String> payload) {
            String token = payload.get("token");

            if (purchasedTickets.containsKey(token)) {
                Ticket ticket = purchasedTickets.get(token);

                ticket.getSeat().setAvailability(true);
                purchasedTickets.remove(token);

                return ResponseEntity.status(HttpStatus.OK).body(ticket);
            }

            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ErrorMessage.WRONG_TOKEN);
        }
    }
  learner_created: true
- name: src/cinema/Stats.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 01 May 2023 10:28:02 UTC"
record: -1
